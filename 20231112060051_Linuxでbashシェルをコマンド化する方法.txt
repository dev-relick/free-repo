Linuxでbashシェルをコマンド化する方法


Linuxでbashシェルスクリプトをコマンド化するには、次のステップを実行します。

1. **シェルスクリプトの作成**：
まず、シェルスクリプトを作成します。例えば、`script.sh` という名前のファイルを使って説明します。

```bash
#!/bin/bash
# これはコメントです
echo "Hello, World!"
```

2. **実行許可の追加**：
スクリプトが実行可能であることを確認するため、実行許可を追加する必要があります。

```bash
chmod +x script.sh
```

3. **パス内のディレクトリへの移動**：
Linuxでコマンドをグローバルに使用可能にするためには、そのスクリプトを`$PATH`環境変数に含まれるディレクトリに移動するか、スクリプトのあるディレクトリを`$PATH`に追加する必要があります。

コマンドがグローバルにアクセスできるようにするためによく使われるディレクトリには以下のものがあります。

- `/usr/local/bin`
- `/usr/bin`
- `~/bin` (ユーザのホームディレクトリ内; ある場合)

次に例を示します。

```bash
sudo mv script.sh /usr/local/bin/
```

4. **スクリプト名の変更**：
`script.sh` のような拡張子は不要です。シンプルなコマンド名を使いたい場合は、名前を変更します。

```bash
sudo mv /usr/local/bin/script.sh /usr/local/bin/hello
```

これで、ターミナルで `hello` と入力することにより、どこからでもスクリプトを実行できます。

5. **`$PATH`の更新** (オプション)：
もしスクリプトを `$PATH` にすでに含まれているディレクトリ以外に置きたい場合、そのパスを `$PATH` 変数に追加する必要があります。例えば、自分のホームディレクトリ内に `bin` というディレクトリを作り、その中にスクリプトを置いたとします。

```bash
mkdir -p ~/bin
mv script.sh ~/bin/hello
chmod +x ~/bin/hello
```

次に、`~/.bashrc` または `~/.bash_profile` (または対応するシェルの設定ファイル)に以下の行を追加して、新しいセッションが開始されるたびに `$PATH` が更新されるようにします。

```bash
export PATH="$HOME/bin:$PATH"
```

そして、変更を有効にするためには、新しいシェルを開くか、次のコマンドで設定ファイルを再読み込みします。

```bash
source ~/.bashrc
```

以上で、作成したスクリプトをシステム上のどこからでもコマンドとして実行できるようになります。

{ "id": "chatcmpl-8KmpZCYB6DEfy8eYrnYa4So4y8HcJ", "object": "chat.completion", "created": 1699964957, "model": "gpt-4-1106-preview", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "Gitの基本的なコマンドを含むチートシートを以下に示しましょう。Gitを使用する際の一般的なワークフローから高度な操作まで、よく使われるコマンドを網羅しています。\n\n**ローカルリポジトリのセットアップ**\n```bash\ngit init # 新しいローカルリポジトリを初期化\ngit clone [url] # リモートリポジトリをローカルに複製\n```\n\n**基本操作**\n```bash\ngit status # ワーキングディレクトリの状態を確認\ngit add [file] # 変更をステージする（fileを指定）\ngit add . # 現在のディレクトリの変更を全てステージする\ngit commit -m \"[commit message]\" # ステージされた変更をコミット\ngit commit -am \"[message]\" # 変更をステージし、コミットする（変更されたファイルすべて）\n```\n\n**ブランチ関連**\n```bash\ngit branch # ローカルブランチのリストを表示\ngit branch [branch_name] # 新しいブランチを作成\ngit checkout [branch_name] # 指定したブランチに切り替え\ngit checkout -b [new_branch] # 新しいブランチを作成して切り替え\ngit merge [branch] # 指定したブランチを現在のブランチにマージ\ngit branch -d [branch_name] # ブランチを削除\n```\n\n**変更の確認と差分**\n```bash\ngit log # コミット履歴を表示\ngit log --oneline # コミット履歴を一行で表示\ngit diff # ファイルの変更点を表示（未ステージ）\ngit diff --staged # ステージされた変更と最後のコミットの差分を表示\ngit show [commit] # 特定のコミットのメタデータと変更内容を表示\n```\n\n**リモートリポジトリとの連携**\n```bash\ngit remote add [name] [url] # 新しいリモートリポジトリを追加\ngit fetch [remote] # リモートリポジトリから情報を取得\ngit pull [remote] [branch] # リモートリポジトリから変更をローカルに統合\ngit push [remote] [branch] # ローカルの変更をリモートリポジトリにアップロード\ngit push --delete [remote] [branch] # リモートのブランチを削除\n```\n\n**Undo Changes**\n```bash\ngit checkout -- [file] # ワーキングディレクトリのファイルを最後のコミットに戻す\ngit reset --hard # すべての変更（ステージされた、されていない）を破棄し、最後のコミットをチェックアウト\ngit reset [file] # ファイルのステージを解除し、ワーキングディレクトリはそのまま\ngit reset [commit] # 現在のブランチを指定したコミットにリセット（ローカルの履歴変更）\ngit revert [commit] # 特定のコミットを打ち消す新しいコミットを作成\n```\n\n**タグ操作**\n```bash\ngit tag # タグの一覧を表示\ngit tag [tag_name] # 現在のコミットにタグを付ける\ngit tag -a [tag_name] -m \"[message]\" # 注釈付きタグを作成\ngit push [remote] [tag_name] # タグをリモートリポジトリにプッシュ\ngit push [remote] --tags # すべてのタグをリモートリポジトリにプッシュ\n```\n\n**その他の便利なコマンド**\n```bash\ngit stash # 変更を一時的に退避\ngit stash pop # 退避された変更を再適用\ngit clean -fd # トラッキングされていないファイルとディレクトリを削除\n\ngit config --global user.name \"Your Name\" # Gitのユーザー名を設定\ngit config --global user.email \"your.email@example.com\" # Gitのメールアドレスを設定\n\ngit config --list # Gitの設定を表示\n```\n\nGitのさらに詳しい使用法やオプションについては、各コマンドのヘルプを確認することができます：\n```bash\ngit help [command]\n```\nまたは\n```bash\ngit [command] --help\n```\n\nコマンドライン以外にもグラフィカルなユーザーインターフェース（GUI）を提供するGitクライアントも存在し、これらを使用することでGitの操作が直感的になる場合があります。しかし、このチートシートがGitの基本操作を学ぶ際や普段使いのリファレンスとして役立つことでしょう。" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 23, "completion_tokens": 1432, "total_tokens": 1455 }, "system_fingerprint": "fp_a24b4d720c" }

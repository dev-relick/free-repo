Excelアドインにリストボックスを追加し、そこにtnsnames.oraからサービス名を読み込む機能を実装するには、以下のステップに従う必要があります。

リストボックスの追加:
XML定義にリストボックスを追加します。これは<comboBox>要素を使用して行います。次のコードスニペットは、既存のXMLにリストボックスを追加する方法を示しています。

xml
Copy code
<group id="DataGroup" label="データ">
    <!-- 既存のボタン -->
    <button id="DatabaseCopyDatabaseFile" label="DBダンプ表現" onAction="DBダンプ表現" size="large" imageMso="DatabaseCopyDatabaseFile" />
    <!-- リストボックスの追加 -->
    <comboBox id="TnsNamesComboBox" label="TNS名" onChange="OnTnsNameChange" />
    <!-- その他のボタン -->
</group>
tnsnames.oraファイルの読み込み:
VBA (Visual Basic for Applications) を使用して、環境変数TNA_ADMのパスからtnsnames.oraファイルを読み込み、そこからサービス名を抽出します。以下は、このプロセスの基本的なアウトラインです。

vba
Copy code
Sub LoadTnsNames()
    Dim envPath As String
    Dim filePath As String
    Dim fileContent As String
    Dim lines() As String
    Dim line As String
    Dim tnsNames As Collection
    Set tnsNames = New Collection

    ' 環境変数からパスを取得
    envPath = Environ("TNA_ADM")
    filePath = envPath & "\tnsnames.ora"

    ' ファイル内容を読み込み
    fileContent = ReadFileContent(filePath)
    lines = Split(fileContent, vbCrLf)

    ' 各行を解析してサービス名を抽出
    For Each line In lines
        If IsServiceName(line) Then
            tnsNames.Add ExtractServiceName(line)
        End If
    Next line

    ' リストボックスにサービス名を設定
    SetTnsNamesInComboBox tnsNames
End Sub
このコードは、ファイルを読み込み、各行を解析してサービス名を抽出し、それらをリストボックスに設定します。ReadFileContent、IsServiceName、ExtractServiceName、およびSetTnsNamesInComboBoxは、このコードで使用されるヘルパー関数で、実装が必要です。

リストボックスのイベントハンドリング:
ユーザーがリストボックスから選択を行ったときに実行されるOnTnsNameChangeイベントハンドラーをVBAに実装します。

vba
Copy code
Sub OnTnsNameChange(control As IRibbonControl, text As String)
    ' ユーザーが選択したTNS名に基づいて処理を行います
End Sub
アドインの起動時にTNS名を読み込む:
アドインが起動する際にLoadTnsNamesを呼び出すようにします。これは、アドインのWorkbook_Openイベントまたはリボンのロードイベント内で行うことができます。

これらのステップは基本的なガイドラインを提供しますが、実装の詳細は、使用するExcelのバージョンや特定の要件に応じて異なる可能性があります。また、ファイルの読み込みや解析には、追加のエラーハンドリングが必要になる場合があります。

User
ReadFileContentのソース
ChatGPT
ReadFileContent 関数は、指定されたパスのファイルの内容を読み取り、その内容を文字列として返すために使用されます。以下は、VBAを使用したReadFileContent関数の基本的な実装です。

vba
Copy code
Function ReadFileContent(filePath As String) As String
    Dim fileNumber As Integer
    Dim fileContent As String
    
    fileNumber = FreeFile() ' 利用可能なファイル番号を取得
    Open filePath For Input As fileNumber ' ファイルを開く

    fileContent = ""
    
    ' ファイル内容を読み込む
    Do While Not EOF(fileNumber)
        fileContent = fileContent & Input(LOF(fileNumber), fileNumber)
    Loop

    Close fileNumber ' ファイルを閉じる

    ReadFileContent = fileContent ' ファイルの内容を返す
End Function
この関数は、指定されたファイルパスからファイルを開き、その内容を読み込んで文字列として返します。FreeFile関数は、使用可能なファイル番号を返し、Openステートメントはそのファイルを読み取りモードで開きます。Input関数は、ファイルの内容を読み取り、EOF関数はファイルの終わりに達したかどうかを確認します。

この関数は基本的なテキストファイル読み込みに適していますが、tnsnames.oraのような特定の形式のファイルを扱う場合、追加の解析ロジックが必要になるかもしれません。また、エラーハンドリングを追加することをお勧めします。例えば、ファイルが存在しない場合やアクセスできない場合などに、適切なエラーメッセージを表示するようにすることが考えられます。

User
IsServiceNameのソース
ChatGPT
IsServiceName 関数は、tnsnames.ora ファイルの各行を解析し、その行がサービス名を定義しているかどうかを判断するために使用されます。tnsnames.ora ファイルの構造に基づいて、サービス名は通常エントリの最初に現れ、= シンボルの前にあります。以下は、この目的のための基本的なVBA関数の例です。

vba
Copy code
Function IsServiceName(line As String) As Boolean
    Dim trimmedLine As String
    trimmedLine = Trim(line) ' 余白を削除

    ' 行がコメントまたは空行でないことを確認
    If Left(trimmedLine, 1) <> "#" And Len(trimmedLine) > 0 Then
        ' '='が存在する場合、サービス名とみなす
        If InStr(trimmedLine, "=") > 0 Then
            IsServiceName = True
        Else
            IsServiceName = False
        End If
    Else
        IsServiceName = False
    End If
End Function
この関数は、与えられた行がコメント（#で始まる）でなく、空行でもないことを確認します。その後、行に=が含まれているかを確認し、含まれていればその行はサービス名を定義しているとみなします。

tnsnames.oraのファイル形式や内容によっては、この関数のロジックを調整する必要があります。特に、サービス名の識別規則やファイル内のコメントの扱いなどに注意してください。また、エラーハンドリングを追加して、不正な行や予期しないフォーマットに対応できるようにすることを検討してください。

User
ExtractServiceNameのソース
ChatGPT
ExtractServiceName関数は、tnsnames.oraファイルから読み込んだ行からサービス名を抽出するために使用されます。このファイルでは、サービス名は通常、=記号の前に位置しています。以下は、この関数の基本的なVBA実装例です。

vba
Copy code
Function ExtractServiceName(line As String) As String
    Dim serviceName As String
    Dim equalsPosition As Integer

    ' '=' の位置を見つける
    equalsPosition = InStr(line, "=")

    If equalsPosition > 0 Then
        ' '=' の前のテキストを取得
        serviceName = Left(line, equalsPosition - 1)
        ' 余白を削除
        serviceName = Trim(serviceName)
    Else
        serviceName = ""
    End If

    ExtractServiceName = serviceName
End Function
この関数は、指定された行から=記号の位置を探し、その前のテキスト（サービス名）を取得しています。取得したテキストから余白を削除した後、そのテキストを戻り値として返します。

tnsnames.oraのフォーマットが異なる場合、この関数を適宜調整する必要があります。また、ファイル内の異なる形式のエントリーに対応するため、追加の解析ロジックを実装することも考えられます。エラーハンドリングの追加も重要です。例えば、無効な行形式や予期せぬ文字列に対する対処などが考えられます。

User
SetTnsNamesInComboBoxのソース
ChatGPT
SetTnsNamesInComboBox関数は、コレクションに格納されたTNS名をExcelのリストボックスに設定するために使用されます。この関数はVBAで実装され、ExcelリボンUIのコントロールと連携します。以下に、その基本的な実装を示します。

まず、グローバル変数としてリボンUIを参照する変数を定義します：

vba
Copy code
Global ribbonUI As IRibbonUI
次に、SetTnsNamesInComboBox関数を実装します：

vba
Copy code
Sub SetTnsNamesInComboBox(ByVal tnsNames As Collection)
    Dim i As Integer
    Dim comboBoxControl As IRibbonControl

    ' コンボボックスコントロールを取得
    Set comboBoxControl = ribbonUI.FindControl("TnsNamesComboBox")

    ' コンボボックスをクリア
    comboBoxControl.Clear

    ' コレクション内の各TNS名をコンボボックスに追加
    For i = 1 To tnsNames.Count
        comboBoxControl.AddItem tnsNames(i), i
    Next i
End Sub
この関数では、まずリボンUIでコンボボックスコントロールを探し、それをクリアしています。その後、渡されたTNS名のコレクションをループし、各要素をコンボボックスに追加しています。

ただし、ExcelのリボンUIをプログラムから動的に操作するのは複雑であり、Excelのバージョンや設定によっては上記のコードがそのまま機能しない場合があります。特に、IRibbonUIやIRibbonControlインターフェースの使用方法や、リボンUIのカスタムコントロールにアクセスする方法には注意が必要です。また、リボンUIが初期化された際にribbonUI変数を適切に設定する必要があります。

この関数はあくまで基本的なガイドラインを提供するものであり、実際の実装はより複雑になる可能性があります。実際の実装には、Excelのバージョン、VBAの環境、およびリボンのカスタマイズ方法に精通している必要があります。

User
コンボボックスのキーをサービス名、バリューをサービス名に設定された接続文字列にすることは出来ますか？
ChatGPT
ExcelのリボンUIでコンボボックスの各項目にキーとバリューを設定することは、直接的な方法ではできません。リボンUIのコンボボックスは比較的単純で、各項目には表示されるテキスト（この場合はサービス名）しか持てません。しかし、ワークアラウンドとして、サービス名と接続文字列の対応を保持する方法が考えられます。

以下の手順に従って、サービス名と接続文字列の対応を保持し、ユーザーがコンボボックスから選択したときに適切な接続文字列を取得できるようにすることができます。

サービス名と接続文字列の対応を保持する:
VBAで辞書オブジェクト（Scripting.Dictionary）を使用して、サービス名と接続文字列の対応を保持します。この辞書はグローバル変数として定義することができます。

vba
Copy code
Global tnsNamesDictionary As Object

Sub Initialize()
    Set tnsNamesDictionary = CreateObject("Scripting.Dictionary")
    ' その他の初期化コード...
End Sub
コンボボックスにサービス名を追加する:
tnsnames.oraからサービス名と接続文字列を読み取り、それらを辞書に追加します。次に、サービス名だけをコンボボックスに追加します。

vba
Copy code
Sub SetTnsNamesInComboBox(ByVal tnsNames As Collection)
    Dim i As Integer
    Dim comboBoxControl As IRibbonControl

    ' コンボボックスコントロールを取得
    Set comboBoxControl = ribbonUI.FindControl("TnsNamesComboBox")

    ' コンボボックスをクリア
    comboBoxControl.Clear

    ' コレクション内の各TNS名をコンボボックスと辞書に追加
    For i = 1 To tnsNames.Count
        Dim serviceName As String
        Dim connectionString As String

        serviceName = tnsNames(i).Name ' サービス名
        connectionString = tnsNames(i).ConnectionString ' 接続文字列

        ' 辞書に追加
        tnsNamesDictionary.Add serviceName, connectionString

        ' コンボボックスにサービス名のみ追加
        comboBoxControl.AddItem serviceName, i
    Next i
End Sub
ユーザー選択時の接続文字列の取得:
ユーザーがコンボボックスからサービス名を選択した際に、辞書を参照して対応する接続文字列を取得します。

vba
Copy code
Sub OnTnsNameChange(control As IRibbonControl, text As String)
    If tnsNamesDictionary.Exists(text) Then
        Dim connectionString As String
        connectionString = tnsNamesDictionary(text) ' 対応する接続文字列を取得
        ' ここで接続文字列を使用する
    End If
End Sub
この方法では、ユーザーが見るのはサービス名のみですが、内部的にはサービス名と接続文字列の対応が保持され、必要に応じて接続文字列を取得することができます。ただし、このアプローチは辞書オブジェクトの使用に依存しており、このオブジェクトを使用するためにはMicrosoft Scripting Runtimeへの参照設定が必要になる場合があります。

User
このバージョンで必要なVBAソースをすべて出力してください
ChatGPT
指定された要件に基づいて、必要なVBAソースコードを全て出力するには、以下のステップを含むコードが必要です。

辞書オブジェクトを使用するためのグローバル変数の宣言
tnsnames.ora ファイルを読み込んで解析する関数
サービス名と接続文字列の対応を保持する辞書を初期化する関数
コンボボックスにサービス名を設定する関数
コンボボックスで選択されたサービス名に基づいて接続文字列を取得するイベントハンドラ
以下は、これらの要件を満たすためのVBAコードの例です。

1. グローバル変数の宣言
vba
Copy code
Global tnsNamesDictionary As Object
Global ribbonUI As IRibbonUI
2. tnsnames.ora ファイルを読み込む関数
vba
Copy code
Function ReadFileContent(filePath As String) As String
    Dim fileNumber As Integer
    Dim fileContent As String
    
    fileNumber = FreeFile() ' 利用可能なファイル番号を取得
    Open filePath For Input As fileNumber ' ファイルを開く

    fileContent = ""
    
    ' ファイル内容を読み込む
    Do While Not EOF(fileNumber)
        fileContent = fileContent & Input(LOF(fileNumber), fileNumber)
    Loop

    Close fileNumber ' ファイルを閉じる

    ReadFileContent = fileContent ' ファイルの内容を返す
End Function
3. サービス名と接続文字列の対応を保持する辞書を初期化する関数
vba
Copy code
Sub InitializeTnsNamesDictionary()
    Set tnsNamesDictionary = CreateObject("Scripting.Dictionary")
    ' ここでtnsnames.oraを解析して辞書を満たす
End Sub
4. コンボボックスにサービス名を設定する関数
vba
Copy code
Sub SetTnsNamesInComboBox()
    Dim comboBoxControl As IRibbonControl
    Dim serviceName As String

    Set comboBoxControl = ribbonUI.FindControl("TnsNamesComboBox")
    comboBoxControl.Clear

    For Each serviceName In tnsNamesDictionary.Keys
        comboBoxControl.AddItem serviceName
    Next serviceName
End Sub
5. コンボボックスで選択されたサービス名に基づいて接続文字列を取得するイベントハンドラ
vba
Copy code
Sub OnTnsNameChange(control As IRibbonControl, text As String)
    Dim connectionString As String

    If tnsNamesDictionary.Exists(text) Then
        connectionString = tnsNamesDictionary(text)
        ' ここで接続文字列を使用する
    End If
End Sub
これらのコードスニペットは基本的な構造を提供しますが、tnsnames.oraの解析ロジックや、実際のアプリケーションにおけるエラーハンドリング、リボンUIの具体的な実装は、ここではカバーされていません。これらは、実際のプロジェクトの具体的な要件に応じて開発する必要があります。


